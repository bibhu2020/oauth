# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples
name: "Deploy Oauth Api"
on:
  push:
    branches: [ "main" ]
    paths:
      - 'oauthapi/**'  # Trigger only when files inside oauthapp/ change
  workflow_dispatch:

env:
  CODE_PATH: 'oauthapi'                  # set this to the path to your web app project, defaults to the repository root
  AZURE_WEBAPP_NAME: oauthv2api    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use
  OAUTHAPI_KEY: ${{ vars.OAUTHAPI_KEY }}
  OAUTHAPP_APPINSIGHTS_CONNECTION_STRING: ${{ vars.OAUTHAPP_APPINSIGHTS_CONNECTION_STRING }}
  OAUTHAPP_SESSION_SECRET: ${{ vars.OAUTHAPP_SESSION_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  OAUTHAPI_AZURE_CLIENT_SECRET: ${{ secrets.OAUTHAPI_AZURE_CLIENT_SECRET }}
  OAUTHAPI_WEATHER_SERVICE_API_KEY: ${{ secrets.OAUTHAPI_WEATHER_SERVICE_API_KEY }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

permissions:
  contents: read
  id-token: write  # âœ… Required for OIDC login


jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      name
    - uses: ./.github/actions/lint-code
      name: Lint Code
      with:
        code-path: ${{ env.CODE_PATH }} #code is in /oauthapi folder
        language: "node"
        node-version: ${{ env.NODE_VERSION }}

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      working-directory: ${{ env.CODE_PATH }} #code is in /oauthapi folder
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: ${{ env.CODE_PATH }} #upload code from /oauthapi folder
        retention-days: 2 # Optional (default is 90)

    - name: Upload shared.env #upload the checked-out .github/env/shared.env so that the deploy job can download and use it
      uses: actions/upload-artifact@v4
      with:
        name: shared-env
        path: .github/env/shared.env
        retention-days: 2  # Optional (default is 90)

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: [build, lint] # Ensure this job runs after build and lint jobs
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app
        path: .

    - name: Download shared environment file
      uses: actions/download-artifact@v4
      with:
        name: shared-env
        path: .github/env

    - name: List current directory and files
      run: |
        echo "ðŸ“‚ Current working directory:"
        pwd

        echo "ðŸ“„ Files in the current directory:"
        ls -la .github/env


    - name: Export environment variables
      shell: bash
      run: |
        while IFS= read -r line; do
          # Skip comments and empty lines
          if [[ "$line" =~ ^#.* ]] || [[ -z "$line" ]]; then
            continue
          fi
          echo "$line" >> $GITHUB_ENV
        done < .github/env/shared.env


    - name: Print selected environment variables
      shell: bash
      run: |
        echo "From YAML AZURE_WEBAPP_NAME=$AZURE_WEBAPP_NAME"
        echo "From .env File RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME"
        echo "from Github Settings AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"
        

    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set App Service application settings
      run: |
        az webapp config appsettings set \
          --name "$AZURE_WEBAPP_NAME" \
          --resource-group "$RESOURCE_GROUP_NAME" \
          --settings \
            PORT=$API_PORT \
            NODE_ENV=$NODE_ENV \
            API_KEY=$OAUTHAPI_KEY \
            GEN_API_URI=$OAUTHGENAPI_URI \
            MANAGED_IDENTITY_CLIENT_ID=$OAUTHAPI_MANAGED_IDENTITY_CLIENT_ID \
            AZURE_TENANT_ID=$AZURE_TENANT_ID \
            AZURE_CLIENT_ID=$OAUTHAPI_AZURE_CLIENT_ID \
            AZURE_CLIENT_SECRET=$OAUTHAPI_AZURE_CLIENT_SECRET \
            WEATHER_SERVICE_API_KEY=$OAUTHAPI_WEATHER_SERVICE_API_KEY \
            APPINSIGHTS_CONNECTION_STRING=$OAUTHAPP_APPINSIGHTS_CONNECTION_STRING \
            USE_CACHE=$USE_CACHE

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
